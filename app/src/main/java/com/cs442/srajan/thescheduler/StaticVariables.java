package com.cs442.srajan.thescheduler;

import android.support.design.widget.Snackbar;
import android.view.View;
import android.widget.EditText;

/**
 * Created by project on 24/11/17.
 *
 * For all the static Variables in the project
 */

public class StaticVariables {
    // Database Version
    public static final int DATABASE_VERSION = 1;
    // Database Name
    public static final String DATABASE_NAME = "TheScheduler.db";
    // User table name
    public static final String TABLE_USER = "user";
    // User Table Columns names
    public static final String COLUMN_USER_ID = "user_id";
    public static final String COLUMN_USER_NAME = "user_name";
    public static final String COLUMN_USER_FORGOT_QUESTION = "user_frgt_quest";
    public static final String COLUMN_USER_FORGOT_ANS = "user_frgt_ans";
    public static final String COLUMN_USER_PASSWORD = "user_password";
    //Course table name
    public static final String TABLE_COURSE = "course";
    //Course Table Column names
    public static final String COLUMN_COURSE_ID = "course_id";
    public static final String COLUMN_COURSE_NUMBER = "course_num";
    public static final String COLUMN_COURSE_NAME = "course_name";
    public static final String COLUMN_COURSE_SPRING_YN = "course_spring_yn";
    public static final String COLUMN_COURSE_DESCRIPTION = "course_desc";
    public static final String COLUMN_COURSE_PREREQUISITES = "course_prereq";
    public static final String COLUMN_COURSE_CREDITS = "course_credits";
    //Course table name
    public static final String TABLE_USER_COURSE = "user_course";
    //Course Table Column names
    public static final String COLUMN_USER_COURSE_SEM = "course_sem";
    public static final String COLUMN_USER_COURSE_LOC = "course_loc";

    //SharedPreferenceVariables
    public static final String SHAREDPREFERENCE_USER_NAME = "user_details";
    //In user_details shared preference
    public static final String USER_ID_USER_ID = "userId";
    public static final String USER_ID_USER_NAME = "username";
    /**
     * Function to check if the edit text is empty
     *
     * @param editText edit text
     * @return false if edit text has a value
     * return true if edit text is null
     *
     **/
    public static boolean checkEditTextIsEmpty(EditText editText){
        return editText.getText().toString().equalsIgnoreCase("");

    }

    /**
     * Function to return a SnackBar with custom Theme
     *
     * @param view shows view
     * @param text shows text
     * @param duration shows duration
     * @param color shows color
     * @return snackbar
     *
     * */
    public static Snackbar themedSnackBar(View view, CharSequence text, int duration, int color){
        Snackbar snackbar = Snackbar.make(view,text,duration);
        snackbar.getView().setBackgroundColor(color);
        return snackbar;
    }

    //ALL_COURSES[courseNum/key][AttribNum]
    //AttribNums:
    // courseID  =  0
    // courseName=  1
    //courseAvailableInSpring? = 2
    //courseInfo = 3
    //coursePrereq = 4
    //courseCredits = 5
    public static final String [][] ALL_COURSES ={
            { " 100	" , "	Introduction to the Profession	" , "	n	" , "	An introduction to science and engineering as a profession. Examines the problem-solving process used in engineering and science. Emphasizes the interdisciplinary and international nature of problem-solving and the need to evaluate solutions in terms of a variety of constraints: computational, financial, and social.	" , "	None	" , "	(1-2-2)	" } ,
            { "	104	" , "	Introduction to Computer Programming for Engineers	" , "	y	" , "	Introduces the use of high-level programming language as a problem-solving tool in engineering including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).	" , "	None	" , "	(2-1-2)	" } ,
            { "	105	" , "	Introduction to Computer Programming	" , "	n	" , "	Introduces the use of high-level programming language as a problem-solving tool, including basic data structures and algorithms, structured programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).	" , "	None	" , "	(2-1-2)	" } ,
            { "	110	" , "	Computing Principles	" , "	y	" , "	An introduction to the following 'big ideas' of computer science: (1) computing is a creative activity; (2) abstraction reduces information and detail to facilitate focus on relevant concepts; (3) data and information facilitate the creation of knowledge; (4) algorithms are used to develop and express solutions to computational problems; (5) programming enables problem solving, human expression, and creation of knowledge; (6) the internet pervades modern computing; and (7) computing has global impacts. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).	" , "	None	" , "	(2-1-2)	" } ,
            { "	115	" , "	Object-Oriented Programming I	" , "	y	" , "	Introduces the use of a high-level object-oriented programming language as a problem-solving tool, including basic data structures and algorithms, object-oriented programming techniques, and software documentation. Designed for students who have had little or no prior experience with computer programming. For students in CS and CS-related degree programs. Students should only take one of these courses (CS 104, CS 105, CS 110, CS 115).	" , "	None	" , "	(2-1-2)	" } ,
            { "	116	" , "	Object-Oriented Programming II	" , "	y	" , "	Introduces more advanced elements of object-oriented programming, including dynamic data structures, recursion, searching and sorting, and advanced object-oriented programming techniques. For students in CS and CS-related degree programs.	" , "	CS115	" , "	(2-1-2)	" } ,
            { "	201	" , "	Accelerated Introduction to Computer Science	" , "	y	" , "	Problem-solving and design using an object-oriented programming language. Introduces a variety of problem-solving techniques, algorithms, and data structures in object-oriented programming.	" , "	CS104/CS110/CS115	" , "	(3-2-4)	" } ,
            { "	330	" , "	Discrete Structures	" , "	y	" , "	Introduction to the use of formal mathematical structures to represent problems and computational processes. Topics covered include Boolean algebra, first-order logic, recursive structures, graphs, and abstract language models. Credit will not be granted for both CS 330 and MATH 230.	" , "	CS116/CS201	" , "	(3-1-3)	" } ,
            { "	331	" , "	Data Structures and Algorithms	" , "	y	" , "	Implementation and application of the essential data structures used in computer science. Analysis of basic sorting and searching algorithms and their relationship to these data structures. Particular emphasis is given to the use of object-oriented design and data abstraction in the creation and application of data structures.	" , "	CS116/CS201	" , "	(3-1-3)	" } ,
            { "	350	" , "	Computer Organization and Assembly Language Programming	" , "	y	" , "	Introduction to the internal architecture of computer systems, including micro-, mini-, and mainframe computer architectures. Focuses on the relationship among a computer's hardware, its native instruction set, and the implementation of high-level languages on that machine. Uses a set of assembly language programming exercises to explore and analyze a microcomputer architecture. Credit will not be granted for both CS 350 and ECE 242.	" , "	CS116/CS201	" , "	(3-1-3)	" } ,
            { "	351	" , "	Systems Programming	" , "	y	" , "	Introduction to the internal architecture of computer systems, including micro-, mini-, and mainframe computer architectures. Focuses on the relationship among a computer's hardware, its native instruction set, and the implementation of high-level languages on that machine. Uses a set of assembly language programming exercises to explore and analyze a microcomputer architecture. Credit will not be granted for both CS 350 and ECE 242.	" , "	CS116/CS201	" , "	(3-1-3)	" } ,
            { "	397	" , "	Special Projects	" , "	n	" , "	**Instructor permission required.**	" , "	None	" , "	Variable	" } ,
            { "	401	" , "	Introduction to Advanced Studies I	" , "	y	" , "	First course in a two-course sequence that is designed to prepare students for graduate study in computer science. Explores the implementation and application of fundamental data structures and algorithms with an emphasis on object-oriented programming in Java. Examines the relationship between these elements and the mathematical structures that form the foundation of computer science. This course does not apply toward M. S./Ph. D. credit in Computer Science.	" , "	CS200/CS201	" , "	(2-2-3)	" } ,
            { "	402	" , "	Introduction to Advanced Studies II	" , "	y	" , "	Second course in a two-course sequence that is designed to prepare students for graduate study in computer science. Explores the development of the multiple layers of software that form a sophisticated software system, from device drivers to application interfaces to user interfaces. Examines how computer architecture influences software development. Emphasizes the design and implementation of interrupt-driven/event-driven software.	" , "	CS401	" , "	(2-2-3)	" } ,
            { "	403	" , "	Foundations to Advanced Studies	" , "	n	" , "	This course is a six-credit hour integration of CS 401 and CS 402. The course is an introduction to data structures but is designed to expand programming skills/concepts using software development methodology techniques. The course also provides an introduction to computer architecture and systems programming including assembly language programming, event handling and multi-threading.	" , "	None	" , "	(4-4-6)	" } ,
            { "	406	" , "	Introduction to Discrete Structures and Algorithms	" , "	n	" , "	This course will provide students with an understanding of some basic discrete mathematics and techniques for designing computer algorithms and measuring and analyzing their behavior. We emphasize the necessary mathematical ideas such as how to prove a mathematical statement, how to analyze the worst case and the average case complexity of an algorithm. We also introduce students to some new techniques used in designing algorithms, such as the approximation algorithms and randomized algorithms.	" , "	None	" , "	(3-0-3)	" } ,
            { "	411	" , "	Computer Graphics	" , "	n	" , "	Overview of display devices and applications. Vector graphics in two and three dimensions. Image generation, representation, and manipulation. Homogeneous coordinates. Modeling and hidden line elimination. Introduction to raster graphics. Perspective and parallel projections.	" , "	CS331/CS401/CS403	" , "	(3-0-3)	" } ,
            { "	422	" , "	Data Mining	" , "	y	" , "	This course will provide an introductory look at concepts and techniques in the field of data mining. After covering the introduction and terminologies to Data Mining, the techniques used to explore the large quantities of data for the discovery of meaningful rules and knowledge such as market basket analysis, nearest neighbor, decision trees, and clustering are covered. The students learn the material by implementing different techniques throughout the semester.	" , "	CS331/CS401/CS403	" , "	(3-0-3)	" } ,
            { "	425	" , "	Database Organization	" , "	y	" , "	Overview of database architectures, including the Relational, Hierarchical, Network, and Object Models. Database interfaces, including the SQL query language. Database design using the Entity-Relationship Model. Issues such as security, integrity, and query optimization.	" , "	CS331/CS401/CS403	" , "	(3-0-3)	" } ,
            { "	429	" , "	Information Retrieval	" , "	y	" , "	Overview of fundamental issues of information retrieval with theoretical foundations. The information-retrieval techniques and theory, covering both effectiveness and run-time performance of information-retrieval systems are covered. The focus is on algorithms and heuristics used to find documents relevant to the user request and to find them fast. The course covers the architecture and components of the search engine such as parser, stemmer, index builder, and query processor. The students learn the material by building a prototype of such a search engine. Requires strong programming knowledge.	" , "	CS331/CS401	" , "	(3-0-3)	" } ,
            { "	430	" , "	Introduction to Algorithms	" , "	y	" , "	Introduction to the design, behavior, and analysis of computer algorithms. Searching, sorting, and combinatorial algorithms are emphasized. Worst case, amortized, and expected bounds on time and space usage.	" , "	CS330&CS331/CS331&MATH230/CS401/CS403	" , "	(3-1-3)	" } ,
            { "	440	" , "	Programming Languages and Translators	" , "	y	" , "	Study of commonly used computer programming languages with an emphasis on precision of definition and facility in use. Scanning, parsing, and introduction to compiler design. Use of compiler generating tools.	" , "	CS330&CS331/CS331&MATH230/CS401/CS403	" , "	(3-0-3)	" } ,
            { "	442	" , "	Mobile Applications Development	" , "	y	" , "	Students will learn a variety of software engineering techniques and design patterns to assist in the rapid development and prototyping of applications, leveraging frameworks and APIs provided by current mobile development platforms (such as Android and iOS). Application lifecycles, data management and persistence mechanisms, and user interface design, among other topics, will be covered. Industry speakers will be invited to speak about best practices. Students (individually or in teams) will take ideas from concept to final implementation and will present their work at the end of the semester. When appropriate, students may take the additional step of deploying their work on the appropriate application marketplace(s).	" , "	(CS331/CS401)&(CS351/CS402)	" , "	(3-0-3)	" } ,
            { "	443	" , "	Compiler Construction	" , "	n	" , "	This course covers the design and implementation of a compiler for modern languages by implementing the following: abstract syntax trees; intermediate representations; static analysis; fix-point operations; symbol tables and type checking; and first-order and high-order function implementation. Students will incrementally create a series of compilers.	" , "	CS440	" , "	(3-0-3)	" } ,
            { "	445	" , "	Object Oriented Design and Programming	" , "	n	" , "	Introduction to methodologies for object-oriented design and programming. Examines the object model and how it is realized in various object-oriented languages. Focuses on methods for developing and implementing object-oriented systems.	" , "	CS331/CS401/CS403	" , "	(3-0-3)	" } ,
            { "	447	" , "	Distributed Objects	" , "	n	" , "	This course provides an introduction to architecture, analysis, design, and implementation of distributed, multi-tier applications using distributed object technology. The course focuses on the services and facilities provided by an Object Request Broker (ORB). Students will use a commercially available ORB and Database Management System to develop distributed object applications.	" , "	CS445	" , "	(3-0-3)	" } ,
            { "	450	" , "	Operating Systems	" , "	y	" , "	Introduction to operating system concepts-including system organization for uniprocessors and multiprocessors, scheduling algorithms, process management, deadlocks, paging and segmentation, files and protection, and process coordination and communication.	" , "	CS351/(CS401&CS402)/CS403	" , "	(3-0-3)	" } ,
            { "	451	" , "	Introduction to Parallel and Distributed Computing	" , "	y	" , "	This course covers general introductory concepts in the design and implementation of parallel and distributed systems covering all the major branches such as cloud computing, grid computing, cluster computing, supercomputing, and many-core computing.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	455	" , "	Data Communications	" , "	y	" , "	Introduction to data communication concepts and facilities with an emphasis on protocols and interface specifications. Focuses on the lower four layers of the ISO-OSI reference model.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	456	" , "	Introduction to Wireless Networks and Performance	" , "	n	" , "	This course covers general introductory concepts in the design and implementation of parallel and distributed systems covering all the major branches such as cloud computing, grid computing, cluster computing, supercomputing, and many-core computing.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	458	" , "	Introduction to Information Security	" , "	n	" , "	An introduction to the fundamentals of computer and information security. This course focuses on algorithms and techniques used to defend against malicious software. Topics include an introduction to encryption systems, operating system security, database security, network security, system threats, and risk avoidance procedures.	" , "	CS425/CS450/CS455	" , "	(3-0-3)	" } ,
            { "	470	" , "	Computer Architecture	" , "	n	" , "	Introduction to the functional elements and structures of digital computers. Detailed study of specific machines at the register transfer level illustrates arithmetic, memory, I/O and instruction processing.	" , "	ECE218&(CS350/ECE242)	" , "	(2-2-3)	" } ,
            { "	480	" , "	Artificial Intelligence Planning and Control	" , "	n	" , "	Introduction to computational methods for intelligent control of autonomous agents, and the use of programming paradigms that support development of flexible and reactive systems. These include heuristic search, knowledge representation, constraint satisfaction, probabilistic reasoning, decision-theoretic control, and sensor interpretation. Particular focus will be places on real-world application of the material.	" , "	(CS331&MATH474)/(CS401&CS402)	" , "	(3-0-3)	" } ,
            { "	481	" , "	Artificial Intelligence Language Understanding	" , "	n	" , "	Theory and programming paradigms that enable systems to understand human language texts and extract useful information and knowledge. For example, extraction of structured event representations from news stories or discovering new research hypotheses by analyzing thousands of medical research articles. the course covers a variety of text analysis and text mining methods, with an emphasis on building working systems. Connections to information retrieval, data mining, and speech recognition will be discussed.	" , "	MATH474&(CS331/CS401/CS403)	" , "	(3-0-3)	" } ,
            { "	482	" , "	Information and Knowledge Management Systems	" , "	n	" , "	This capstone course is designed as a project course whose purpose is to enable students to see how the various algorithms and systems they have learned about in their prerequisite courses can be used in context to create useful knowledge management tools. Class periods will be divided among discussion of design of information and knowledge management systems, lectures on effective project management techniques, and hands-on advising of student project group meetings.	" , "	(CS442&CS425&CS429)/(CS422&CS425&CS481)/(CS425&CS429&CS481)	" , "	(3-0-3)	" } ,
            { "	485	" , "	Computers and Society	" , "	y	" , "	Discussion of the impact of computer technology on present and future society. Historical development of the computer. Social issues raised by cybernetics.	" , "	COM421/COM424/COM425/COM428/COM435	" , "	(3-0-3)	" } ,
            { "	487	" , "	Software Engineering I	" , "	y	" , "	Study of the principles and practices of software engineering. Topics include software quality concepts, process models, software requirements analysis, design methodologies, software testing and software maintenance. Hands-on experience building a software system using the waterfall life cycle model. Students work in teams to develop all life cycle deliverables: requirements document, specification and design documents, system code, test plan, and user manuals.	" , "	(CS331/CS401/CS403)&CS425	" , "	(3-0-3)	" } ,
            { "	491	" , "	Undergraduate Research	" , "	y	" , "	**Instructor permission required.**	" , "	None	" , "	Variable	" } ,
            { "	495	" , "	Topics in Computer Science	" , "	y	" , "	This course will treat a specific topic, varying from semester to semester, in which there is particular student or staff interest.	" , "	None	" , "	Variable	" } ,
           /* { "	497	" , "	Special Projects	" , "	y	" , "	Special Projects	" , "	None	" , "	Variable	" } ,
            { "	511	" , "	Topics in Computer Graphics	" , "	n	" , "	Covers advanced topics in computer graphics. The exact course contents may change based on recent advances in the area and the instructor teaching it. Possible topics include: Geometric modeling, Subdivision surfaces, Procedural modeling, Warping and morphing, Model reconstruction, Image based rendering, Lighting and appearance, Texturing, Natural phenomena, Nonphotorealistic rendering Particle systems, Character animation, Physically based modeling and animation.	" , "	CS411	" , "	(3-0-3)	" } ,
            { "	512	" , "	Computer Vision	" , "	n	" , "	Introduction to fundamental topics in computer vision and the application of statistical estimation techniques to this area. Intended to give the student a good basis for work in this important field. Topics include: Feature extraction, Probabilistic modeling, Camera calibration, Epipolar geometry, Statistical estimation, Model reconstruction, Statistical filtering, Motion estimation, Recognition, Shape from single image cues.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	513	" , "	Geospatial Vision and Visualization	" , "	y	" , "	Geospatial information has become ubiquitous in everyday life as evidenced by on-line mapping services such as NOKIA Here Map, Microsoft Bing Map, the 'place' features on social network websites such as Facebook, and navigation apps on smart phones. Behind the scenes is digital map content engineering that enables all types of location-based services. Course material will be drawn from the instructor's research and development experience at NOKIA Location and Commerce (formerly NAVTEQ), the Chicago-based leading global provider of digital map, traffic, and location data. This course will provide a comprehensive treatment of computer vision, image processing and visualization techniques in the context of digital mapping, global positioning and sensing, next generation map making, and three-dimensional map content creations. Real world problems and data and on-site industry visits will comprise part of the course curriculum.	" , "	None	" , "	(3-0-3)	" } ,
            { "	513	" , "	Geospatial Vision and Visualization	" , "	y	" , "	Geospatial information has become ubiquitous in everyday life as evidenced by on-line mapping services such as NOKIA Here Map, Microsoft Bing Map, the 'place' features on social network websites such as Facebook, and navigation apps on smart phones. Behind the scenes is digital map content engineering that enables all types of location-based services. Course material will be drawn from the instructor's research and development experience at NOKIA Location and Commerce (formerly NAVTEQ), the Chicago-based leading global provider of digital map, traffic, and location data. This course will provide a comprehensive treatment of computer vision, image processing and visualization techniques in the context of digital mapping, global positioning and sensing, next generation map making, and three-dimensional map content creations. Real world problems and data and on-site industry visits will comprise part of the course curriculum.	" , "	None	" , "	(3-0-3)	" } ,
            { "	520	" , "	Data Integration, Warehousing, and Provenance	" , "	y	" , "	This course introduces the basic concepts of data integration, data warehousing, and provenance. We will learn how to resolve structural heterogeneity through schema matching and mapping. The course introduces techniques for querying several heterogeneous datasources at once (data integration) and translating data between databases with different data representations (data exchange). Furthermore, we will cover the data-warehouse paradigm including the Extract-Transform-Load (ETL) process, the data cube model and its relational representations (such as snowflake and star schema), and efficient processing of analytical queries. This will be contrasted with Big Data analytics approaches that (besides other differences) significantly reduce the upfront cost of analytics. When feeding data through complex processing pipelines such as data exchange transformations or ETL workflows, it is easy to lose track of the origin of data. Therefore, in the last part of the course we cover techniques for representing and keeping track of the origin and creation process of data (its provenance). The course emphasizespractical skills through a series of homework assignments that help students develop a strong background in data integration systems and techniques. At the same time, it also addresses the underlying formalisms. For example, we will discuss the logic based languages used for schema mapping and the dimensional data model as well as their practical application (e.g., developing an ETL workflow with rapid miner and creating a mapping between two example schemata). The literature reviews will familiarize students with data integration and provenance research.	" , "	CS425	" , "	(3-0-3)	" } ,
            { "	521	" , "	Object-Oriented Analysis and Design	" , "	n	" , "	This course describes a methodology that covers a wide range of software engineering techniques used in system analysis, modeling and design. These techniques integrate well with software process management techniques and provide a framework for software engineers to collaborate in the design and development process. The methodology features the integration of concepts, including software reusability, frame works, design patterns, software architecture, software component design, use-case analysis, event-flow analysis, event-message analysis, behavioral-life cycle analysis, feature, multiple-product, risk and rule analysis, and automatic code generation. (Credit will not be given for CS 521 if CS751 is taken)	" , "	CS445/CS487	" , "	(3-0-3)	" } ,
            { "	522	" , "	Advanced Data Mining	" , "	y	" , "	Continued exploration of data mining algorithms. More sophisticated algorithms such as support vector machines will be studied in detail. Students will continuously study new contributions to the field. A large project will be required that encourages students to push the limits of existing data mining techniques.	" , "	CS422	" , "	(3-0-3)	" } ,
            { "	525	" , "	Advanced Database Organization	" , "	y	" , "	Comprehensive coverage of the problems involved in database system implementation and an in-depth examination of contemporary structures and techniques used in modern database management systems. Teaches advanced skills appropriate for DBMS architects and developers , database specialist, and the designers and developers of client/server and distributed systems. Focus is on transaction management, database structures and distributed processing.	" , "	CS425	" , "	(3-0-3)	" } ,
            { "	529	" , "	Information Retrieval	" , "	n	" , "	The course covers the advanced topics in Information Retrieval. The topics such as Summarization, cross-lingual, Meta-Search, Question Answering, Parallel and distributed IR systems are discussed. The students get involved in research ideas, and get involved in individual and group projects.	" , "	CS429	" , "	(3-0-3)	" } ,
            { "	530	" , "	Theory of Computation	" , "	y	" , "	Computability topics such as Turing machines, nondeterministic machines, undecidability, and reducibility. Computational complexity topics such as time complexity, NP-completeness and intractability, time and space hierarchy theorems. Introduces the complexity classes P, NP, NL, L, PSPACE, NC, RNC, BPP and their complete problems.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	531	" , "	Topics in Automata Theory	" , "	n	" , "	Topics selected from mathematical systems and automata theory, decision problems, realization and minimization, algebraic decomposition theory and machines in a category.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	532	" , "	Formal Languages	" , "	n	" , "	This course provides an introduction to the theory of formal languages and machines. Topics to be covered include: strings, alphabets, and languages; grammars, the Chomsky Hierarchy of languages and corresponding machines (regular sets and finite automata, context free languages of various types, Turing machines and recursive functions, undecidable problems), and computational complexity, polynomial-time reductions, NP-completeness.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	533	" , "	Computational Geometry	" , "	n	" , "	This course covers fundamental algorithms and data structures for convex hulls, Voronoi diagrams, Delauney triangulation, Euclidean spanning trees, point location, and range searching. Also included are lower bounds and discrepancy theory. Optimization in geometry will be covered. This includes fixed dimensional linear programming and shortest paths. Graphic data structures such as BSP trees will be covered.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	535	" , "	Design and Analysis of Algorithms	" , "	n	" , "	Design of efficient algorithms for a variety of problems, with mathematical proof of correctness and analysis of time and space requirements. Topics include lower bounds for sorting and medians, amortized analysis of advanced data structures, graph algorithms (strongly connected components, shortest paths, minimum spanning trees, maximum flows and bipartite matching) and NP-Completeness.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	536	" , "	Science of Programming	" , "	n	" , "	Formal specification of how programs execute operational semantics , how mathematical functions programs compute denotational semantics , and how to use logic to characterize properties and invariants of the program execution (axiomatic semantics).	" , "	CS331/CS401	" , "	(3-0-3)	" } ,
            { "	537	" , "	Software Metrics	" , "	n	" , "	Theoretical foundations for software metrics. Data collection. Experimental design and analysis. Software metric validation. Measuring the software development and maintenance process. Measuring software systems. Support for metrics. Statistical tools. Setting up a measurement program. Application of software measurement.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	538	" , "	Combinatorial Optimization	" , "	n	" , "	Linear programs and their properties. Efficient algorithms for linear programming. Network flows, minimum cost flows, maximum matching, weighted matching, matroids.Prerequisite:CS 430 and a linear algebra course.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	539	" , "	Game Theory: Algorithms and Applications	" , "	y	" , "	This course focuses on computational issues in the theory of games, economics, and network design. Interest in the algorithmic aspects of games is motivated by the computational issues of fundamental aspects of games and economic theory, e.g. Nash equilibrium and market equilibrium. Computing and approximating Nash equilibrium will be studied. Of considerable interest to the computer science community are problems that arise from the Internet and computer networks and are similar to issues that arise in traditional transport networks, e.g. Wardrop equilibrium.	" , "	CS430/CS530	" , "	(3-0-3)	" } ,
            { "	540	" , "	Syntactic Analysis of Programming Languages	" , "	n	" , "	Formal definition of syntax with emphasis on context-free languages. Elementary techniques for scanning and parsing programming languages. Symbol table management. Semantic routines and code generation. The class will write a simple translator.	" , "	CS440	" , "	(3-0-3)	" } ,
            { "	541	" , "	Topics in Compiler Construction	" , "	n	" , "	Advanced topics in compiler construction, including incremental and interactive compiling, error correction, code optimization, models of code generators, etc. The objective of the course is to provide an in-depth coverage of compiler optimization techniques, including both classical optimization and areas of current interest in compiler research.	" , "	CS440	" , "	(3-0-3)	" } ,
            { "	542	" , "	Computer Networks I: Fundamentals	" , "	y	" , "	This course focuses on the engineering and analysis of network protocols and architecture in terms of the Internet. Topics include content distribution, peer-to-peer networking, congestion control, unicast and multicast routing, router design, mobility, multimedia networking quality of service, security and policy-based networking.	" , "	CS455	" , "	(3-0-3)	" } ,
            { "	544	" , "	Computer Networks II: Network Services	" , "	n	" , "	Qualitative and quantitative analysis of networks. A combination of analytical and experimental analysis techniques will be used to study topics such as protocol delay, end-to-end network response time, intranet models, Internet traffic models, web services availability, and network management.	" , "	CS542/ECE545	" , "	(3-0-3)	" } ,
            { "	545	" , "	Distributed Computing Landscape	" , "	n	" , "	Introduction to the theory of concurrent programming languages. Topics include formal models of concurrent computation such as process algebras, nets, and actors; high-level concurrent programming languages and their operational semantics; and methods for reasoning about correctness and complexity of concurrent programs.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	546	" , "	Parallel and Distributed Processing	" , "	n	" , "	This course covers general issues of parallel and distributed processing from a user's point of view which includes system architectures, programming, performance evaluation, applications, and the influence of communication and parallelism on algorithm design.	" , "	CS430&CS450	" , "	(3-0-3)	" } ,
            { "	547	" , "	Wireless Networking	" , "	y	" , "	This course introduces cellular/PCS systems, short-range mobile wireless systems, fixed wireless systems, satellites, and ad hoc wireless systems. It explains in detail the underlying technology as well as regulations, politics, and business of these wireless communications systems. It looks beyond the hype, examining just what is and is not possible with present-day and future wireless systems. As an advanced graduate course, it will combine extensive reading and in-class discussion of the research literature with in-depth independent research projects of students' own choosing.	" , "	CS455	" , "	(3-0-3)	" } ,
            { "	548	" , "	High-Speed Networks	" , "	n	" , "	The course studies the architectures, interfaces, protocols, technologies, products and services for broadband (high-speed) multimedia networks. The key principles of the protocols and technologies used for representative network elements and types of broadband network are studied. Specifically, cable modems, Digital Subscriber Lines, Power Lines, wireless 802.16 (WiMax), and broadband cellular Internet are covered for broadband access; for broadband Local Area Networks (LANs), Gigabit Ethernet, Virtual LANs and wireless LANs (802.11 WiFi and Bluetooth) are discussed; for broadband Wide Area Networks (WANs) the topics covered include optical networks (SONET/SDH,DWDM, optical network nodes, optical network nodes, optical switching technologies), frame-relay, ATM, wire-speed routers, IP switching, and MPLS. Also, quality of service issues in broadband networks and a view of the convergence of technologies in broadband networks are covered.	" , "	CS455	" , "	(3-0-3)	" } ,
            { "	549	" , "	Cryptography and Network Security	" , "	n	" , "	This course covers general issues of parallel and distributed processing from a user's point of view which includes system architectures, programming, performance evaluation, applications, and the influence of communication and parallelism on algorithm design.	" , "	CS430&CS450	" , "	(3-0-3)	" } ,
            { "	550	" , "	Advanced Operating Systems	" , "	y	" , "	Advanced operating system design concepts such as interprocess communication, distributed processing, replication and consistency, fault tolerance, synchronization, file systems. Study of systems highlighting these concepts.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	551	" , "	Operating System Design and Implementation	" , "	n	" , "	This course covers in detail the design and implementation of processes, interprocess communication, semaphores, monitors, message passing, scheduling algorithm, input/output, device drivers, memory management, file system design, security and protection mechanisms. The hardware-software interface and the user process-system call-kernel interface are examined in detail. Students modify and extend a multiuser operating system.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	552	" , "	Distributed Real-Time Systems	" , "	n	" , "	With the advancement of computer hardware, embedded devices, and network technology, real-time applications have become pervasive, ranging from smart automobiles to automated traffic control. Different from general-purpose applications, correct executions of real-time applications depend on both functional correctness and temporal correctness. This course is to study the fundamentals of distributed real-time computing with the focus on its temporal aspects.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	553	" , "	Cloud Computing	" , "	y	" , "	This course is a tour through various topics and technologies related to cloud computing. Students will explore solutions and learn design principles for building large network-based systems to support both compute-intensive and data-intensive applications across geographically distributed infrastructure. Topics include resource management, programming models, application models, system characterizations, and implementations. Discussions will often be grounded in the context of deployed cloud computing systems such as Amazon EC2 and S3, Microsoft Azure, Google AppEngine, Eucalyptus, Nimbus, OpenStack, Google's MapReduce, Yahoo's Hadoop, Microsoft's Dryad, Sphere/Sector, and many other systems. The course involves lectures, outside invited speakers, discussions of research papers, programming assignments, and a major project (including both a written report and an oral presentation).	" , "	CS450/CS455	" , "	(3-0-3)	" } ,
            { "	554	" , "	Data-Intensive Computing	" , "	n	" , "	This course is a tour through various research topics in distributed data-intensive computing, covering topics in cluster computing, grid computing, supercomputing, and cloud computing. The course will explore solutions and learn design principles for building large network-based computational systems to support data-intensive computing. This course is geared for junior/senior-level undergraduates and graduate students in computer science.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	555	" , "	Analytic Models and Simulation of Computer Systems	" , "	n	" , "	Analytic and simulation techniques for the performance analysis of computer architecture, operating systems and communication networks. Rigorous development of queuing models. Study of simulation languages and models.	" , "	CS450	" , "	(3-0-3)	" } ,
            { "	556	" , "	Cyber-Physical Systems: Languages and Systems	" , "	n	" , "	Different from general-purpose and traditional computer applications, cyber-physical systems have both continuous and discrete components, hence requiring new methodologies to integrate traditional continuous control theory/systems with traditional discrete software systems. The focus of this course is to discuss and understand the challenges in emerging cyber-physical systems and to explore possible solutions from the perspectives of systems specification, system modeling, programming languages, systems designs, and software engineering. This course will focus on the languages and systems aspects of cyber-physical systems.	" , "	None	" , "	(3-0-3)	" } ,
            { "	557	" , "	Cyber-Physical Systems: Networking and Algorithms	" , "	n	" , "	The goal of the course is to provide students with the necessary foundations to apply wireless sensor networking, scheduling theory, and algorithms in the field of computer science. The focus is to discuss and understand the challenges in emerging cyber-physical systems, open distributed real-time systems, and wireless sensor networks. The course will examine different perspectives of wireless networks such as various MAC protocols, routing protocols, scheduling protocols, localization, clock synchronization, data aggregation and data fusion, compressive and cooperative sensing, security, fault detection and diagnosis, online program, and networked control systems. The course will also examine the interaction of different systems.	" , "	None	" , "	(3-0-3)	" } ,
            { "	558	" , "	Advanced Computer Security	" , "	y	" , "	This course will teach various modern topics in network and computer security. It will provide a thorough grounding in cyber-security for students who are interested in conducting research on security and networking and for students who are more broadly interested in real-world security issues and techniques. Students will undertake a semester-long research project with the goal of technical publications. Lecture topics will include, but not limited to: (1) Unwanted traffic, such as denial of service (DoS), and spam; (2) Malware, such as botnet, worm, and virus; (3) Network configuration and defense, such as firewall, access control, and intrusion detection systems; (4) Cyber physical system security, such as critical infrastructure protection (e.g., smart grid); and (5) Hot topics, such as software-defined networking (SDN), network verification, data center and enterprise network security, web security and more.	" , "	CS450/CS455/CS458	" , "	(3-0-3)	" } ,
            { "	559	" , "	Biometrics	" , "	n	" , "	In a security conscious society, biometrics-based authentication and identification have become a central focus for many important applications as biometrics can provide accurate and reliable identification. Biometrics research and technology continue to mature rapidly, driven by pressing industrial and government needs and supported by industrial and government funding. This course offers an introduction to major biometric techniques, the underlying pattern recognition and computer vision basis for these biometrics, scientific testing and evaluation methodologies of biometrics systems, a deeper study of facial recognition, and an examination of the current privacy and social/ethical issues surrounding the technology. The course includes readings from the literature, short writing assignments, and practical experience with current biometric technology. Prerequisite working knowledge of Matlab or C/C++ is necessary.	" , "	None	" , "	(3-0-3)	" } ,
            { "	560	" , "	Computer Science in the Classroom	" , "	n	" , "	Emphasis on how to organize a selected computer science course. Discussion of what to teach, the problems typically encountered in teaching, and how to best organize the concepts in a computer science course.	" , "	None	" , "	(3-0-3)	" } ,
            { "	561	" , "	The Computer and Curriculum Content	" , "	n	" , "	Presentation techniques from white board to web-based instructional units using currently available software. Emphasis on incorporating the computer as a teaching tool in the presentation of class material. Single Concept Learning Modules (SCLM) are developed.	" , "	None	" , "	(3-0-3)	" } ,
            { "	565	" , "	Computer Assisted Instruction	" , "	n	" , "	Hardware and software for the effective use of the computer in an educational environment, CAI (Computer-Assisted/Aided Instruction) being one of the major areas of investigation .	" , "	CS560/CS561	" , "	(3-0-3)	" } ,
            { "	566	" , "	Practicum in the Application of Computers to Education	" , "	n	" , "	Provides supervised experience in the development of computer-based teaching units. Evaluation of different theoretical and/or technical approaches to the use of computer in the classroom.	" , "	CS560&CS561	" , "	(1-4-3)	" } ,
            { "	570	" , "	Advanced Computer Architecture	" , "	n	" , "	Computer system design and architecture such as pipelining and instruction-level parallelism, memory-hierarchy system, interconnection networks, multicore and multiprocessors, and storage architecture. Selected study on current experimental computer systems.	" , "	CS450&CS470	" , "	(3-0-3)	" } ,
            { "	572	" , "	Advanced Topics in Computer Architecture	" , "	n	" , "	Current problems in computer architecture.	" , "	CS570	" , "	(3-0-3)	" } ,
            { "	579	" , "	Online Social Network Analysis	" , "	y	" , "	This course will explore the latest algorithms for analyzing online social networks, considering both their structure and content. Fundamentals of social graph theory will be covered including distance, search, influence, community discovery, diffusion, and graph dynamics. Fundamentals of text analysis will also be covered with an emphasis on the type of text used in online social networks and common applications. Topics include sentiment classification, information extraction, clustering, and topic modeling. Emphasis will be placed on the application of this technology to areas such as public health, crisis response, politics, and marketing.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	580	" , "	Topics in Machine Learning	" , "	n	" , "	This course covers advanced topics in machine learning. The exact course contents may change based on recent advances in the area and the instructor teaching it. Possible topics include active learning, reinforcement learning, online learning, non-parametric learning, inductive learning, statistical relational learning, dimensionality reduction, ensemble methods, transfer learning, outlier detection, specific application areas of machine learning, and other relevant and/or emerging topics.	" , "	None	" , "	(3-0-3)	" } ,
            { "	581	" , "	Topics in Artificial Intelligence	" , "	n	" , "	Covers various advanced topics in AI, including both theory and practice. Content may vary by instructor. Possible topics include: Planning: STRIPs planning; Partial-order planning; Situation calculus; Theorem proving; GraphPlan/SatPlan; Transformational planning; Simulated annealing; Motion planning; Case-based reasoning; Multi-agent coordination; Negotiation planning; Representation and Reasoning: Logical representation; Frame problem; Probabilistic reasoning; Bayesian networks; Game Playing: Minimax search; Evaluation functions; Learning evaluation functions; Markov Decision Processes; Reinforcement learning for games; Developing AI agents; Multi-agent planning.	" , "	CS480	" , "	(3-0-3)	" } ,
            { "	582	" , "	Computational Robotics	" , "	n	" , "	Covers basic algorithms and techniques used in Computational Robotics, to give the student a good basis for work in this highly relevant field. Topics include: Locomotion, Non-visual sensors and algorithms, Uncertainty modeling, data fusion, State space models, Kalman filtering, Visual sensor, Sampling theory, Image features, Depth reconstruction, Multiple view geometry, Ego-motion, Active vision, Reasoning, Spatial decomposition, Geometric representations, Topological representations, Path planning, Spatial uncertainty, Active control, Pose maintenance, Dead reckoning, Correlation-based localization, Sensorial maps, Task planning and task interference, Multi-agent coordination	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	583	" , "	Probabilistic Graphical Models	" , "	n	" , "	This course will cover probabilistic graphical models -- powerful and interpretable models for reasoning under uncertainty. The generic families of models such as directed, undirected, and factor graphs as well as specific representations such as hidden Markov models and conditional random fields will be discussed. The discussions will include both the theoretical aspects of representation, learning, and inference, and their applications in many interesting fields such as computer vision, natural language processing, computational biology, and medical diagnosis.	" , "	None	" , "	(3-0-3)	" } ,
            { "	584	" , "	Machine Learning	" , "	y	" , "	Introduce fundamental problems in machine learning. Provide understanding of techniques, mathematical concepts, and algorithms used in machine learning. Provide understanding of the limitations of various machine learning algorithms and the way to evaluate performance of learning algorithms. Topics include introduction, regression, kernel methods, generative learning, discriminative learning, neural networks, support vector machines, graphical models, unsupervised learning, and dimensionality reduction.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	585	" , "	Natural Language Processing	" , "	y	" , "	An introduction to the problems of computing with human languages. Parsing. Semantic representations. Text generation. Lexicography. Discourse. Sublanguage studies. Applications to CAI, database interfaces and information retrieval.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	586	" , "	Software Systems Architectures	" , "	y	" , "	This course covers the state-of-the-art in architectural design of complex software systems. The course considers commonly-used software system architectures, techniques for designing and implementing these architectures, models and notations for characterizing and reasoning about architectures, and case studies of actual software system architectures.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	587	" , "	Software Project Management	" , "	y	" , "	Concepts of software product and process quality. Role of TQM in software project management. Use of metrics, feasibility studies, cost and effort estimates. Discussion of project planning and scheduling. The project team and leadership issues. The Capability Maturity Model: basic tenets and application of process evaluation.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	588	" , "	Advanced Software Engineering Development	" , "	n	" , "	Software development process improvement is a major objective of this course. This is achieved through a series of individual programming and process projects. Students learn to plan their projects, apply measurements, estimate size, schedule tasks, and classify defects in order to improve the quality of both their development process and their software products.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	589	" , "	Software Testing and Analysis	" , "	n	" , "	Concepts and techniques for testing and analysis of software. Software testing at the unit, subsystem, and system levels. Specification-based testing. Code-based testing. Model-based testing. Methods for test generation and validation. Static and dynamic analysis. Formal methods and verification. Reliability analysis.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	590	" , "	Seminar in Computer Science	" , "	n	" , "	Investigation and discussion by faculty and students concentrated on some topic of current interest. May be taken more than once. Prerequisite: Instructor permission required.	" , "	None	" , "	(0-3-3)	" } ,
            { "	591	" , "	Research and Thesis of Masters Degree	" , "	y	" , "	Instructor permission required.	" , "	None	" , "	Variable	" } ,
            { "	594	" , "	Research Problems	" , "	y	" , "	Instructor permission required.	" , "	None	" , "	Variable	" } ,
            { "	595	" , "	Topics in Computer Science	" , "	y	" , "	This course will treat a specific topic, varying from semester to semester, in which there is a particular student or staff interest. May be taken more than once.	" , "	None	" , "	Variable	" } ,
            { "	597	" , "	Reading and Special Problems	" , "	y	" , "	May be taken more than once. (Credit: Variable) Instructor permission required.	" , "	None	" , "	Variable	" } ,
            { "	612	" , "	Topics in Computer Vision	" , "	n	" , "	Covers advanced topics in computer vision to enhance knowledge of students interested in this highly important area. The topics in this course may change between semesters depending on the instructor teaching the course and the current state of the art in this area. Possible topics include: Image based modeling and rendering, Multiple view geometry, Auto-calibration, Object recognition, Motion analysis, Tracking, Perceptual user interfaces, Face and gesture recognition, Active vision.	" , "	CS512	" , "	(0-0-3)	" } ,
            { "	630	" , "	Advanced Topics in Algorithms	" , "	n	" , "	Theoretical analysis of various types of algorithms. Topics vary, and may include approximation, quantum, on-line, distributed, randomized, and parallel algorithms. Requires CS 430. Instructor permission required.	" , "	CS430	" , "	(3-0-3)	" } ,
            { "	642	" , "	Advanced Topics in Networking	" , "	n	" , "	Introduction to advanced networking research. A particular focus area will be considered, keeping current with advances in computer networking. Quantitative methods will be emphasized.	" , "	CS542	" , "	(3-0-3)	" } ,
            { "	681	" , "	Topics in Computational Linguistics	" , "	n	" , "	Covers various topics in linguistics as they may be applied to various computational problems in AI, NLP, or IR. The topics in this course may change between semesters depending on the instructor teaching the course and the current state of the art in this area. Possible topics include: Systemic Functional Linguistics, Clausal structure, Group structure, Complex structure, Cognitive Linguistics, Process semantics.	" , "	CS585	" , "	(3-0-3)	" } ,
            { "	689	" , "	Advanced Topics in Software Engineering	" , "	n	" , "	This course covers the state-of-the-art in architectural design of complex software systems. The course considers commonly-used software system architectures, techniques for designing and implementing these architectures, models and notations for characterizing and reasoning about architectures, and case studies of actual software system architectures.	" , "	CS487	" , "	(3-0-3)	" } ,
            { "	691	" , "	Research and Thesis Ph.D.	" , "	y	" , "	Instructor permission required.	" , "	None	" , "	Variable	" } ,
            { "	695	" , "	Doctoral Seminar	" , "	y	" , "	Doctoral Seminar	" , "	None	" , "	(0-1-1)	" } ,
            { "	750	" , "	Computer Aided Software Engineering	" , "	n	" , "	This course presents the state-of-the-art of computer-aided software engineering technologies. CASE encompasses a collection of automated tools and methods that provide automated support to the software specification, design, development, testing, maintenance, and management of large and complex software systems. Students will develop working understanding of CASE methodologies and tools.	" , "	CS487	" , "	(2-0-2)	" } ,
            { "	763	" , "	Automated Software Testing	" , "	n	" , "	This course will examine both the state-of-the-art and the state-of-practice in automated software testing on a system level and an unit level. Relevant issues include theoretical foundations of automated testing, automation tools and techniques, empirical studies and industrial experience. Key topics include, but are not limited to: Fundamentals of automated software testing, automated test design, modeling and generation, automated test execution, automated test management, automated test metrics, automated tools, automated feature and regression testing Environments to support cost-effective automated software testing, discussions on the barriers to industrial use of automated testing.	" , "	CS487	" , "	(2-0-2)	" }*/
};
public static final String [][] COURSE_TIMES = {
        { "	100	"},
        { "	104	" , "	Class ~ Yousef Elmehdwi ~ MW from 1:50pm to 2:40pm	" , "	Pandaliyampalayam TR 3:15pm-4:05pm	" , "	Lab ~ Yousef Elmehdwi ~ F from 1:50pm to 2:40pm	" , "	Lab ~ Yousef Elmehdwi ~ F from 1:50pm to 2:40pm	" , "	Lab ~ W from 3:15pm to 4:05pm	" , "	Lab~ W from 3:15pm to 4:05pm	"},
        { "	105	"},
        { "	110	" , "	Class ~ Matthew Bauer ~ M from 10am to 11:15am	" , "	Lab~ Matthew Bauer ~ W from 10am to 11:15am	" , "	Lab ~ Matthew Bauer ~ W from 10am to 11:15am 	"},
        { "	115	" , "	Class ~ Jon Hanrath ~ MW from 10am to 10:50am	" , "	Class ~ Yousef Elmehdwi ~ W from 5pm to 6:40pm 	" , "	Lab~ Jon Hanrath ~ F from 10am to 10:50am	" , "	Lab ~ Yousef Elmehdwi ~ W from 6:50pm to 7:40pm 	"},
        { "	116	" , "	Class ~ Matthew Bauer ~ MW from 9am to 9:50am	" , "	Class ~ ~ TR from 1:50pm to 2:40pm	" , "	Class ~ John Korah ~ M from 5pm to 6:15pm	" , "	Lab ~ Matthew Bauer ~ F from 9am to 9:50am	" , "	Lab ~ Matthew Bauer ~ F from 9am to 9:50am	" , "	Lab ~ ~ W from 1:50pm to 2:40pm 	" , "	Lab ~ ~ W from 1:50pm to 2:40pm	" , "	Lab~ John Korah ~ M from 6:25pm to 7:40pm 	" , "	Lab~ John Korah ~ M from 6:25pm to 7:40pm	"},
        { "	201	" , "	Class ~ Dylan Boliske ~ MW from 5pm to 6:15pm	" , "	Lab~ Dylan Boliske ~ F from 5pm to 6:40pm	" , "	Internet ~ Dylan Boliske	"},
        { "	330	" , "	Class ~ ~ TR from 10am to 11:15am		Lab ~ ~ W from 10am to 10:50am	" , "	Independent Study/Research ~ Matthew Bauer	"},
        { "	331	" , "	Class ~ Matthew Bauer ~ MW from 11:25am to 12:40pm	" , "	Class ~ Michael Saelee ~ WF from 1:50pm to 3:05pm	" , "	Class ~ Matthew Bauer ~ F from 11:25am to 12:15pm	" , "	Lab ~ Matthew Bauer ~ F from 11:25am to 12:15pm	" , "	Lab ~ Michael Saelee ~ M from 1:50pm to 2:40pm	" , "	Internet ~ Michael Saelee	"},
        { "	350	" , "	Class ~ Kyle Hale ~ MW from 3:15pm to 4:30pm	" , "	Class ~ Kyle Hale ~ F from 3:15pm to 4:05pm	" , "	Lab ~ Kyle Hale ~ F from 3:15pm to 4:05pm	" , "	Lab ~ Kyle Hale ~ F from 3:15pm to 4:05pm	"},
        { "	351	" , "	Class ~ Michael Saelee ~ WF from 3:15pm to 4:30pm	" , "	Lab ~ Michael Saelee ~ M from 3:15pm to 4:05pm	" , "	Lab ~ Michael Saelee ~ M from 3:15pm to 4:05pm	" , "	Lab ~ Michael Saelee ~ M from 3:15pm to 4:05pm	"},
        { "	397	"},
        { "	401	" , "	Class ~ Michael Choi ~ T from 6:25pm to 8:05pm	" , "	Class ~ Michael Choi ~ R from 6:25pm to 8:05pm	" , "	Internet ~ Michael Choi	" , "	Internet ~ Michael Choi	"},
        { "	402	" , "	Class ~ Virgil Bistriceanu ~ M from 6:25pm to 8:05pm	" , "	Class ~ Virgil Bistriceanu ~ W from 6:25pm to 8:05pm	" , "	Internet ~ Virgil Bistriceanu	" , "	Internet ~ Virgil Bistriceanu	"},
        { "	403	"},
        { "	406	"},
        { "	411	"},
        { "	422	" , "	Class ~ Vijay Gurbani ~ T from 6:25pm to 9:05pm	" , "	Internet ~ Vijay Gurbani	" , "	Internet ~ Vijay Gurbani	"},
        { "	425	" , "	Class ~ Omar Aldawud ~ R from 6:25pm to 9:05pm	" , "	Internet ~ Omar Aldawud	" , "	Internet ~ Omar Aldawud	"},
        { "	429	" , "	Class ~ John Korah ~ T from 5pm to 7:40pm	" , "	Internet ~ John Korah	" , "	Internet ~ John Korah	"},
        { "	430	" , "	Class ~ Edward Reingold ~ MW from 11:25am to 12:40pm	" , "	Class ~ Edward Reingold ~ MW from 10am to 11:15am in TBA	" , "	Lab ~ Edward Reingold ~ F from 11:25am to 12:15pm	" , "	Lab ~ Edward Reingold ~ F from 10am to 10:50am	" , "	Internet ~ Edward Reingold 	" , "	Internet ~ Edward Reingold"},
        { "	440	" , "	Class ~ James Sasaki ~ MW from 1:50pm to 3:05pm	"},
        { "	442	" , "	Class ~ Christopher Hield ~ T from 5pm to 7:40pm	" , "	Internet ~ Christopher Hield	" , "	Internet ~ Christopher Hield	"},
        { "	443	"},
        { "	445	"},
        { "	447	"},
        { "	450	" , "	Class ~ Wu-Hon Leung ~ MW from 10am to 11:15am	" , "	Internet ~ Wu-Hon Leung	" , "	Internet ~ Wu-Hon Leung	"},
        { "	451	" , "	Class ~ Zhiling Lan ~ TR from 11:25am to 12:40pm	" , "	Internet ~ Zhiling Lan	" , "	Internet ~ Zhiling Lan	"},
        { "	455	" , "	Class ~ Edward Chlebus ~ TR from 11:25am to 12:40pm	" , "	Internet ~ Edward Chlebus	" , "	Internet ~ Edward Chlebus	"},
        { "	456	"},
        { "	458	"},
        { "	470	"},
        { "	480	"},
        { "	481	"},
        { "	482	"},
        { "	485	" , "	Class ~ Jon Hanrath ~ MW from 8:35am to 9:50am	" , "	Class ~ Jon Hanrath ~ MW from 11:25am to 12:40pm	" , "	Independent Study/Research ~ Matthew Bauer	"},
        { "	487	" , "	Class ~ Dennis Hood ~ TR from 10am to 11:15am	" , "	Class ~ Dennis Hood ~ TR from 1:50pm to 3:05pm	" , "	Internet ~ Dennis Hood	" , "	Internet ~ Dennis Hood	"},
        { "	491	" , "	Independent Study/Research ~ Aron Culotta	" , "	Independent Study/Research ~ Edward Reingold	" , "	Independent Study/Research ~ Mustafa Bilgic	" , "	Independent Study/Research ~ Gruia Calinescu 	" , "	Independent Study/Research ~ Xian-He Sun	" , "	Independent Study/Research ~ Gady Agam	" , "	Independent Study/Research ~ Sanjiv Kapoor	"},
        { "	495	" , "	Class ~ Michael Saelee ~ WF from 10am to 11:15am	"},
        { "	497	" , "	Class ~ Wu-Hon Leung	" , "	Independent Study/Research ~ Michael Saelee	" , "	Independent Study/Research ~ Shlomo Argamon	" , "	Independent Study/Research ~ Matthew Bauer	" , "	Independent Study/Research ~ Zhiling Lan	" , "	Independent Study/Research ~	" , "	Independent Study/Research ~ Xin Chen	" , "	Independent Study/Research ~ Ioan Raicu	" , "	Independent Study/Research ~ Dong Jin	" },
        { "	511	"},
        { "	512	"},
        { "	513	" , "	Class ~ Xin Chen ~ F from 6:25pm to 9:05pm	"},
        { "	520	" , "	Class ~ Boris Glavic ~ MW from 1:50pm to 3:05pm	" , "	Internet ~ Boris Glavic	" , "	Internet ~ Boris Glavic	"},
        { "	521	"},
        { "	522	" , "	Class ~ Irina Matveeva ~ R from 6:25pm to 9:05pm	" , "	Internet ~ Irina Matveeva		Internet ~ Irina Matveeva	"},
        { "	525	" , "	Class ~ Yousef Elmehdwi ~ MW from 11:25am to 12:40pm	" , "	Internet ~ Yousef Elmehdwi	" , "	Internet ~ Yousef Elmehdwi	"},
        { "	529	"},
        { "	530	" , "	Class ~ Gruia Calinescu ~ TR from 10am to 11:15am 	" , "	Class ~ Gruia Calinescu ~ TR from 10am to 11:15am	" , "	Internet ~ Gruia Calinescu	" , "	Internet ~ Gruia Calinescu	"},
        { "	531	"},
        { "	532	"},
        { "	533	"},
        { "	535	"},
        { "	536	" , "	Class ~ James Sasaki ~ MW from 3:15pm to 4:30pm	" , "	Class ~ James Sasaki ~ MW from 3:15pm to 4:30pm	" , "	Internet ~ James Sasaki	" , "	Internet ~ James Sasaki	"},
        { "	537	"},
        { "	538	"},
        { "	539	" , "	Class ~ Sanjiv Kapoor ~ TR from 1:50pm to 3:05pm	" , "	Internet ~ Sanjiv Kapoor	" , "	Internet ~ Sanjiv Kapoor	"},
        { "	540	"},
        { "	541	"},
        { "	542	" , "	 Class ~ Edward Chlebus ~ TR from 10am to 11:15am	" , "	Internet ~ Edward Chlebus	" , "	Internet ~ Edward Chlebus	"},
        { "	544	"},
        { "	545	"},
        { "	546	"},
        { "	547	" , "	Class ~ Peng-Jun Wan ~ T from 6:25pm to 9:05pm	" , "	Internet ~ Peng-Jun Wan	" , "	Internet ~ Peng-Jun Wan	"},
        { "	548	"},
        { "	549	"},
        { "	550	" , "	Class ~ Xian-He Sun ~ MW from 3:15pm to 4:30pm	" , "	Class ~ Xian-He Sun ~ MW from 3:15pm to 4:30pm	" , "	Internet ~ Xian-He Sun	" , "	Internet ~ Xian-He Sun	"},
        { "	551	"},
        { "	552	"},
        { "	553	" , "	Class ~ Ioan Raicu ~ MW from 11:25am to 12:40pm	" , "	Internet ~ Ioan Raicu	" , "	Internet ~ Ioan Raicu	"},
        { "	554	"},
        { "	555	"},
        { "	556	"},
        { "	557	"},
        { "	558	" , "	Class ~ Dong Jin ~ TR from 3:15pm to 4:30pm	" , "	Internet ~ Dong Jin	" , "	Internet ~ Dong Jin	"},
        { "	559	"},
        { "	560	"},
        { "	561	"},
        { "	565	"},
        { "	566	"},
        { "	570	"},
        { "	572	"},
        { "	579	" , "	Class ~ Aron Culotta ~ MW from 1:50pm to 3:05pm	" , "	Internet ~ Aron Culotta	" , "	Internet ~ Aron Culotta	"},
        { "	580	"},
        { "	581	"},
        { "	582	"},
        { "	583	"},
        { "	584	" , "	Class ~ Wai Gen Yee ~ M from 6:25pm to 9:05pm	" , "	Internet ~ Wai Gen Yee	" , "	Internet ~ Wai Gen Yee	"},
        { "	585	" , "	Class ~ Shlomo Argamon ~ TR from 11:25am to 12:40pm	" , "	Internet ~ Shlomo Argamon	" , "	Internet ~ Shlomo Argamon	"},
        { "	586	" , "	Class ~ Bogdan Korel ~ MW from 5pm to 6:15pm	" , "	Internet ~ Bogdan Korel	" , "	Internet ~ Bogdan Korel	"},
        { "	587	" , "	Class ~ Atef Bader ~ F from 6:25pm to 9:05pm	" , "	Internet ~ Atef Bader	" , "	Internet ~ Atef Bader	"},
        { "	588	"},
        { "	589	"},
        { "	590	"},
        { "	591	" , "	Many Sections Available	"},
        { "	594	" , "	Many Sections Available	"},
        { "	595	" , "	Class ~ Yuan Hong ~ T from 6:25pm to 9:05pm	"},
        { "	597	" , "	Many Sections Available	"},
        { "	612	"},
        { "	630	"},
        { "	642	"},
        { "	681	" },
        { "	689	"},
        { "	691	" , "	Many Sections Available	" , "	Internet ~ Ioan Raicu	"},
        { "	695	" , "	Class ~ Yuan Hong ~ T from 5pm to 6:15pm	"},
        { "	750	"},
        { "	763	"}
        };

        //note if 201, don't need 115 116
public static final String [][] CS_COURSE_REQUIREMENTS = {
        {"	100 "},
        {"	115	"},
        {"	116	"},
        {"	330	"},
        {"	331	"},
        {"	350	"},
        {"	351	"},
        {"	425	"},
        {"	430	"},
        {"	440	"},
        {"	450	"},
        {"	485	"},
        {"	487	"},
        {"	0	"},
        {"	0	"},
        {"	0	"},
};


}
